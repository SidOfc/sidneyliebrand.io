@use "sass:map";
@use "sass:list";

// NOTE: $vars is injected via next.config.js

@mixin css-theme-vars {
  @each $theme, $config in map-deep-get($vars, 'themes') {
    @if ($theme == "default") {
      @each $var, $value in $config {
        --#{$var}: #{$value};
      }
    } @else {
      &.#{$theme} {
        @each $var, $value in $config {
          --#{$var}: #{$value};
        }
      }
    }
  }
}

@mixin themed($property, $args...) {
  $length: list.length($args);
  $var: list.nth($args, 1);

  @if $length == 1 {
    #{$property}: #{map-deep-get($vars, 'themes', 'default', $var)};
    #{$property}: var(--#{$var});
  } @else if $length > 1 {
    $values: ();
    $keys: ();

    @for $idx from 2 through $length {
      $arg: list.nth($args, $idx);
      $values: list.append($values, map-deep-get($vars, 'themes', 'default', $arg));
      $keys: list.append($keys, "var(--#{$arg})");
    }

    #{$property}: #{substitute($var, $values...)};
    #{$property}: #{substitute($var, $keys...)};
  }
}

@mixin active-theme($themes...) {
  $length: list.length($themes);
  $selector: ":global(.#{list.nth($themes, 1)}) &";

  @if $length > 1 {
    @for $idx from 2 through $length {
      $selector: "#{$selector},:global(.#{list.nth($themes, $idx)}) &";
    }
  }

  #{$selector} {
    @content;
  }
}

@function map-deep-get($map, $keys...) {
  @each $key in $keys {
    $map: map-get($map, $key);
  }

  @return $map;
}
